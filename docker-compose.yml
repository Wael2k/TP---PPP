
services:
  app:
    build:
      dockerfile: DockerFile
    ports:
      - "8080:8080"
    networks:
      - internal
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/examenTP
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - db

  db:
    image: postgres:latest
    networks:
      - internal
    container_name: postgresSqlContainer
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: examenTP
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadminContainer
    ports:
      - "5050:90"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin
    depends_on:
      - db
    networks:
      - external
      - internal


  nginx:
    build:
      dockerfile: DockerFileProxy
    container_name: customProxyContainer
    ports:
      - "80:80" # Expose port 80 to the host
    networks:
      - internal
    depends_on:
      - app
volumes:
  postgres_data:
  jenkins_home: # Persistent volume for Jenkins configuration and job data

networks:
  internal:
  external:

#  jenkins:
#    build:
#      context: .
#      dockerfile: DockerFileJenkins # Ensure this file exists
#    container_name: jenkins-docker
#    ports:
#      - "8081:8080" # Jenkins web interface
#      - "50000:50000" # Jenkins agent connections
#    volumes:
#      - jenkins_home:/var/jenkins_home # Persist Jenkins data
#      - /var/run/docker.sock:/var/run/docker.sock # Allow Jenkins to use the host's Docker engine
#    networks:
#      - internal
#      - external
#    environment:
#      JAVA_OPTS: "-Djenkins.install.runSetupWizard=false" # Optional: Skip setup wizard
#      JENKINS_USER: admin
#      JENKINS_PASS: admin



